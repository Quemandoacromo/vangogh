Issues:
	No known at the moment
	- downloads not updated on sync

improve extracts:
	- extracts are rewritten with in-memory data, consider reading from disk (+locking) and adding changes - to allow parallel execution
	
improve validation:
	- ./vangogh val -s heretic_kingdoms_the_inquisition -o win - wrong ok placement
	
improve size:
	- consider providing more precise estimates
	
improve cleanup:
	- cleanup output is too light

get-down improvements:
	- use the same dir naming scheme as in images/videos and assign first letter
	- modify local slugs to take this into account

DRY progress display:
	- it's copied in dolo, vangogh validation

vangogh_pages improvements:
	- move code to dolo to download a set of Urls
	- refactor all vangogh_pages usage to that ^
	- refactor all multifile download (images, videos) to that
	- deprecate vangogh_pages
	- create new dolo method to download files as concurrent chunks
	
configuration:
	- create a configuration file at a certain default location
	- use it to specify directories/kvas connection strings

vangogh_api:
	- create new module that provides all core commands functionality, leaving input output and clo handlers to vangogh to allow serving both CLI and HTTP

Work on gaugin can start:
	- Publish vangogh on GitHub
	- REST API:
		- Data (GET only):
			- /product-type/media/titles?sort,limit,start
			- /product-type/media/{id}
			- /images/{image-id}
			- /videos/{video-id}
	
documentation investment:
	- add clo.json help for stable commands
	- generate MD/HTML for help using clo to use in README
	
yt-urls improvements:
	- support cipher urls
		- 276 videos at this moment
	- support login required videos
		- 14 videos at this moment
		
Misc improvements:
	- investigate text/tabwriter for output
		
clo improvement:
	- "SAME-AS" command to copy arguments from another command or predefined sets
		
kvas improvements:
	- rewrite to support concurrent operations
	- provide a REST API

dolo improvements:
	- rewrite dolo to support concurrent ranges downloads
	- return report that contains:
		- files that were successfully downloaded with sizes
		- files that were not attempted to be downloaded

verbosity improvements:
	- add flags to functions to be optionally verbose
	- when verbose - use log.Print
	- when not - continue using fmt.Print

figure out where 1435735429 gets box-art image in Galaxy:
	- proxy requests and find the source

Standartize directories:
	- opt/vangogh, etc/vangogh, etc.
	- provide flags for operations to specify non-default directories as well as allow reading from env. variables

concurrency improvements:
	- rewrite get-data pipeline to be concurrent:
		- getItems
		- split
		- extract
		- search

Improve verbosity:
	- add module that produced log.Print to the log output
	- add a "verbose" flag to every module
	- use log.Print for errors and info, fmt.Print for progress

Documentation:
	- update modules documentation:
		- clo
		- kvas
		- dolo

Tests:
	- add test coverage for modules:
		- kvas
		- dolo
	- Make sure every closer is closed - validate errors, etc.

Archive:
	- ./vangogh info -s spiritfarer @done(2021-09-03) @project(Issues)
	- ./vangogh get-down -s heretic_kingdoms_the_inquisition -o win @done(2021-09-03) @project(Issues)
	- Duplicate names: @done(2021-09-04) @project(Issues)
		- batman_arkham_origins @done(2021-09-04)
		- the_witcher_3_wild_hunt_game @done(2021-09-04)
		- batman_a_telltale_game_series @done(2021-09-04)
		- baldurs_gate_enhanced_edition @done(2021-09-04)
		- outlast @done(2021-09-04)
		- wolfenstein_ii_the_new_colossus_rotw @done(2021-09-04)
		- titan_quest_anniversary_edition @done(2021-09-04)
	clo improvements: @done(2021-08-31)
		- parse as Url clo://app/cmd?arg=values @done(2021-08-31)
		- register handlers (CLI and HTTP) for cmds and perform internal routing - perhaps as a map[string]func ? @done(2021-08-31)
			- Perform checks if all cmds are handled and return errors if not @done(2021-08-31)
		- transition from app routing to clo routing and make route func private, perhaps expose Handle func that takes Url as input @done(2021-08-31)
		- add another built-in cmd to start web server (with optional parameters like port) @done(2021-08-31)
		
	cleanup improvements: @done(2021-08-24)
		- consider non-destructive option to move instead of delete with an option to delete @done(2021-08-24)
		- add scrub action to cleanup moved files @done(2021-08-24)
	get-downloads improvements: @done(2021-08-24)
		- some products have unresolvable manualUrls, we should store status codes for those and take into account for size, cleanup, validation purposes @done(2021-08-24)
		- force-update should override this for downloads and allow trying again @done(2021-08-24)
	read-ids improvements: @done(2021-08-22)
		- silently ignore potential ids that are not keys (sum -s 1 | info -r) @done(2021-08-22)
	get-videos improvements: @done(2021-08-22)
		- video download timeouts take too much time @done(2021-08-22)
	- size -missing and -all produced the same results @done(2021-08-22) @project(Issues)
	id itemization improvements: @done(2021-08-22)
		- continue to DRY code and make more efficient itemizations @done(2021-08-22)
	verbosity improvments: @done(2021-08-14)
		- get *-page (media) n/N... @done(2021-08-14)
		- split licences (game) -> licence-products N... @done(2021-08-14)
		- get details (game): @done(2021-08-14)
		- (space) finding .... @done(2021-08-14)
		- fetch details (game) n/N... @done(2021-08-14)
		- extract data... (type)... done @done(2021-08-14)
		- get images: @done(2021-08-14)
		- id Title... (type)... done @done(2021-08-14)
		
	- use it to specify default scopes (e.g. sync, download, etc.) @done(2021-08-07) @project(configuration)
	validation improvements: @done(2021-08-07)
		- provide validation summary @done(2021-08-05)
		- don't stop on errors, report them like everything else @done(2021-08-05)
	download/cleanup/validation improments: @done(2021-08-05)
		- print what is being processed before doing the work @done(2021-08-05)
	Download files: @done(2021-08-02)
		- add support for missing option @done(2021-08-02)
		- add get-downloads and clean-up to sync:
			- rename "all" to "all-except-downloads" @done(2021-08-02)
			- add downloads flag that is excluded by default (true "all" = "all-except-downloads" + "downloads") @done(2021-08-02)
		
	standartize idSet generation: @done(2021-08-02)
		- DRY from other cmds and encapsulate itemization of ids for a given set of args @done(2021-08-02)
		
	Validate files: @done(2021-07-26)
		- use validation files @done(2021-07-26)
		- implement progress counter @done(2021-07-26)
		
	Cleanup cmd: @done(2021-07-26)
		- new cleanup command to remove files no longer required for current version (based on local-manual-url) @done(2021-07-26)
		- rename getDownloadsList to mapDownloadList and move to a separate file @done(2021-07-26)
		- when clearing out files, also cleanup xml files @done(2021-07-26)
	- store xml files outside files directory for cleaner enumeration @done(2021-07-26) @project(Download files)
	Download images: @done(2021-07-26)
		- group by product and update similarly to other products (e.g. getting Undertale icon... logo... image... done) @done(2021-07-26)
	info improvements: @done(2021-07-25)
		- when video is specified - show if it's known missing @done(2021-07-25)
	- force refresh if details got updated recently (since the last update?) @done(2021-07-18) @project(Download files)
	- create new helper vangogh_downloads that encapsulates working with download links @done(2021-07-11) @project(Download files)
	- create new type: @done(2021-07-11) @project(Download files)
		- OperatingSystem @done(2021-07-11)
		- DownloadUrlMetadata @done(2021-07-11)
	- extract links for OS, language @done(2021-07-11) @project(Download files)
	- resolve URLs to exact links @done(2021-07-11) @project(Download files)
	- get validation files @done(2021-07-11) @project(Download files)
	- save association manualUrl -> local file @done(2021-07-11) @project(Download files)
	- download manualUrl files @done(2021-07-11) @project(Download files)
	- don't load account products just to get slug, use title extract instead @done(2021-07-15) @project(Download files)
	sync improvements: @done(2021-07-08)
		- reimplement sync flags to add invidual items as well as remove individual from all @done(2021-07-08)
	get-items improvements: @done(2021-07-02)
		- clearly print every step of the journey - how many are expected to be downloaded and why @done(2021-07-02)
		- print updates like other items - on the same line as progressive update @done(2021-07-02)
	use slug where ids are used: @done(2021-06-27)
		- review and add slug as an option to specify ids @done(2021-06-27)
	extract gog-order-date from orders @done(2021-06-27)
	extract release date, added to GOG date and add as all-text properties: @done(2021-06-27)
		- create a formatter for the value that converts from epoch to human date / time @done(2021-06-27)
		- separate GOG release from product release (global release as called in GOG data) @done(2021-06-27)
	Improve verbosity: @done(2021-06-24)
		- print the current update category for get-items @done(2021-06-24)
		- use new line separators for groups @done(2021-06-24)
	- slug should use precise match @done(2021-06-23) @project(use slug where ids are used)
	language names improvements: @done(2021-06-20)
		- in order to match details languages we need to match code to language name in it's own language (e.g. ru = "русский", not "Russian") - perhaps as a new property native-language-name @done(2021-06-20)
		- Extract native-language-names like language names @done(2021-06-20)
	- product files by OS, language: @done(2021-06-16) @project(Download files)
		- create helper for Details that returns collection of strucutred data @done(2021-06-16)
		- suspect this needs to go through the []interface{}, extract "language", then encode/decode download data @done(2021-06-16)
	- deserialize like Downloads handling errors internally @done(2021-06-16) @project(language names improvements)
	search improvements: @done(2021-06-15)
		- provide properties helper that specifies properties that should use precise match (slug, lang) @done(2021-06-15)
	- need a new API or a flag for exact match search (not contains) - to be used in reverse lookups for things like language code (this should solve "en" -> ["English", "French"]) @done(2021-06-15) @project(search improvements)
	- read-ids regressed @done(2021-06-15) @project(Known issues)
	- sorting options are a bit overwhelming - just because you can, doesn't mean you should @done(2021-06-15) @project(Known issues)
	- missing-video-url extracts regressed @done(2021-06-15) @project(Known issues)
	- wrap map[string]bool as an IdSet type and add convenience methods @done(2021-06-14) @project(Misc improvements)
		- likely add general set with project agnostic methods @done(2021-06-12)
		- add vangogh specific set with sorting, etc @done(2021-06-14)
	- replace printInfo with a method that takes IdSet and nicely prints out everything, perhaps with actual sorting @done(2021-06-15) @project(Misc improvements)
	- Dying Light: White Death Bundle (1539474600) best quality video is not downloading, consider adding all streaming formats to try next best @done(2021-06-11) @project(Known issues)
	- return more than one urls and provide helpers to select url to fix known issue with 1539474600 @done(2021-06-11) @project(yt-urls improvements)
	- galaxy-background for Darksiders III: Soundtrack (1788625497) is empty @done(2021-06-01) @project(Known issues)
	history.txt: @done(2021-05-31)
		- add a file that collects results of sync operations over time @done(2021-05-31)
		- consider adding information on the downloaded files: @done(2021-05-31)
			- products that contributed to downloaded files @done(2021-05-31)
			- files with sizes @done(2021-05-31)
			- overall amount of data downloaded that session @done(2021-05-31)
	- getPages @done(2021-05-31) @project(concurrency improvements)
	Report: @done(2021-05-31)
		- add various reports: @done(2021-05-31)
			- total product per type and media @done(2021-05-31)
			- all publishers, developers and number of games they have @done(2021-05-31)
	diff data changes: @done(2021-05-31)
		- when some piece of data changes, consider storing a previous (timestamped) version @done(2021-05-31)
		- create a diff between versions @done(2021-05-31)
	Operations log: @done(2021-05-31)
		- add operations log or last success timestamp @done(2021-05-31)
		- track updated account products (new, modified, updated) @done(2021-05-31)
	- add default options method @done(2021-05-31) @project(dolo improvements)
	Download videos: @done(2021-05-31)
		- use approach similar to images - itemize all local files to avoid reownloading same files @done(2021-05-31)
		- or create a very simple youtube downloader, since we don't need to handle any special cases - just download publicly available videos: @done(2021-05-31)
			- download videos by url @done(2021-05-31)
			- investigate cipher downloads @done(2021-05-31)
				- start by adding cipher extracts to list all videos that are known to have cipher to avoid downloading them again @done(2021-05-31)
	sum improvements: @done(2021-05-31)
		- replace "details" with "account", "store-products, api-products-v1, api-products-v2" with "store" and "wishlist-products" with "wishlist" @done(2021-05-31)
	vangogh_extracts improvement: @done(2021-05-31)
		- add a func to verify that a list has required property for a graceful fail @done(2021-05-31)
	- youtube-dl using exec.LookPath to confirm it's available @done(2021-05-27) @project(Download videos)
	- download with 'youtube-dl {id} --id' @done(2021-05-27) @project(Download videos)
	- implement minimalistic youtube video link extract module @done(2021-05-27) @project(Download videos)
	- try single letter partition, assuming omst products have one or two videos (confirm with data) @done(2021-05-29) @project(Download videos)
	- SetMany doesn't work great for types @done(2021-05-26) @project(Known issues)
	digest improvements: @done(2021-05-26)
		- add a count of products that have that value @done(2021-05-26)
	- "search -lang jp" some games show duplicate languages @done(2021-05-24) @project(Known issues)
		- hypothesis: api-products-v2 locations scopes are contributing to this @done(2021-05-24)
	- last-sync.txt has products with no titles @done(2021-05-24) @project(Known issues)
		- seems like SetMany is overwriting existing extracts with only updated data @done(2021-05-24)
	- extract slug from store-products, account-proidcuts, api-products-v1 @done(2021-05-23) @project(Download files)
	tags management command: @done(2021-05-22)
		- Create: POST /account/tags/add?name={tag_name} @done(2021-05-22)
			- handle response @done(2021-05-22)
		- Delete: POST /account/tags/delete?tag_id={tag_id} @done(2021-05-22)
			- handle response @done(2021-05-22)
		- Add: POST /account/tags/attach?product_id={product_id}&tag_id={tag_id} @done(2021-05-22)
			- handle response @done(2021-05-22)
		- Remove: POST /account/tags/detach?product_id={product_id}&tag_id={tag_id} @done(2021-05-22)
			- handle response @done(2021-05-22)
		- Support offline operations? @done(2021-05-22)
			- extracts? @done(2021-05-22)
	- confirm that both adding and removing works for extracts @done(2021-05-22) @project(tags management command)
	- Edit: POST /account/tags/update?tags={tags_json} @done @project(tags management command)
	add more properties: @done(2021-05-19)
		- language @done(2021-05-19)
			- extract languages names @done(2021-05-19)
	printInfo improvements: @done(2021-05-19)
		- provide sort order of the properties for display @done(2021-05-19)
	text improvements: @done(2021-05-19)
		- define default text properties and use only those for search, printInfo @done(2021-05-19)
		- add flag to use all text properties @done(2021-05-19)
	get-items improvements: @done(2021-05-19)
		- process account-products with Updates to queue details updates @done(2021-05-19)
	vangogh_properties improvements: @done(2021-05-19)
		- check type assertions before invoking @done(2021-05-19)
	stringsContain improvements: @done(2021-05-18)
		- audit all usages and deprecate helper func @done(2021-05-18)
	command-line piping: @done(2021-05-17)
		- allow using results of another command as input (e.g. owned <- search) for ids @done(2021-05-17)
		- skip lines that start with space @done(2021-05-17)
		- parse other line using first word before the space as potential id @done(2021-05-17)
	clo improvements: @done(2021-05-16)
		- sort commands when printing help @done(2021-05-16)
		- standartize on a single space offset like vangogh @done(2021-05-16)
	owned command: @done(2021-05-16)
		- add command @done(2021-05-16)
		- check if we own a PACK if we own all games in the pack @done(2021-05-16)
		- test case: https://www.gog.com/game/rain_games_steampunk_bundle @done(2021-05-16)
	add a summary command: @done(2021-05-13)
		- print what has changed since provided timestamp @done(2021-05-13)
		- group changes per product and highlight what changed for a product-type (e.g. new: wishlist-products, updated: store-product) @done(2021-05-13)
		- if there are diffs available - add flag to show those @done(2021-05-13)
		- automatically run summary after sync @done(2021-05-13)
	add support for orders: @done(2021-05-13)
		- URL: https://www.gog.com/account/settings/orders/data?canceled=1&completed=1&in_progress=1&not_redeemed=1&page=1&pending=1&redeemed=1 @done(2021-05-13)
		- add required interfaces (GetIds) @done(2021-05-13)
		- split @done(2021-05-13)
	search improvements: @done(2021-05-10)
		- add support for replaced properties @done(2021-05-10)
		- add support for searching property with multiple values (doom OR quake) @done(2021-05-10)
		- for any replaced properties reverse find original values - search by those @done(2021-05-10)
		- add ability to create multiple values lists for clo runtime properties @done(2021-05-10)
	Fix bugs: @done(2021-05-09)
		- product not found: 1207660843 @done(2021-05-09)
			- should is-required-by-games, requires-games should be added to api-products-v2 missing? @done(2021-05-09)
		- consider making api-products-v2 source for missing api-products-v1 @done(2021-05-09)
		- license-products as a source for apv1, apv2 // decided against that, since license contains a lot of ids that result in 404s (??) @done(2021-05-09)
	skiplists improvements: @done(2021-05-09)
		- rename denylist -> skiplist @done(2021-05-09)
		- api-products should be a single denylist since both lists produce same errors for same items. // decided against that since the code uses product type name as a filename @done(2021-05-09)
	- need to implement related extracts for tag_id (tag_name) @done(2021-05-07) @project(tags management command)
	- implement a replaced properties whenever we display tag_id - actually use tag_name @done(2021-05-07) @project(tags management command)
	improvements to the digest command: @done(2021-05-07)
		- add support for properties: @done(2021-05-07)
			- tags @done(2021-05-07)
	complete tags data support: @done(2021-05-07)
		- extract tag-name property @done(2021-05-07)
		- make tag replaced property @done(2021-05-07)
	refactor extracts: @done(2021-05-07)
		- top level helper that abstracts working with extracts @done(2021-04-28)
		- instead of passing maps around there is a convinient interface to request value(s) from an extract by asset @done(2021-04-28)
		- provide foundation to add (transparent) property replacement @done(2021-05-07)
			- centralize looking for keys by value @done(2021-05-07)
			- centralize getting value by key @done(2021-05-07)
	test DLC improvements: @done(2021-04-27)
		- remove some DLC from licences @done(2021-04-27)
		- perform sync @done(2021-04-27)
		- note whether base product details were queued for update @done(2021-04-27)
	add owned command: @done(2021-04-26)
		- check the product in account-products / licence-products @done(2021-04-26)
		- if not found - check includes-games and ownership of those @done(2021-04-26)
		- consider this to be the property that's extracted in a special way (see above) @done(2021-04-26)
	sync improvements: @done(2021-04-26)
		- add "since" flag to handle interrupted sync attempts and allow to get updated/missing products @done(2021-04-26)
	improve DLC handling: @done(2021-04-26)
		- is there an existing update that happens to account-product when DLC is purchased? @done(2021-04-24)
		- if not - investigate owned.json and whether it contains owned DLCs @done(2021-04-25)
			- https://menu.gog.com/v1/account/licences @done(2021-04-24)
			- create a new remote-product-type @done(2021-04-24)
			- split into individual licence products for created-date purposes @done(2021-04-24)
			- make this main type to detail types account-products, details - if not present, query is-requires-games (copy logic from api-products-v2 includes-games) @done(2021-04-26)
				- create DLCs property for ApiProductV1/V2 @done(2021-04-24)
				- extract DLCs property @done(2021-04-24)
				- define logic for updating main details when DLC got created/updated
		- if not - try to figure out how store pages get "in library for DLCs" @done(2021-04-24)
		- in general - understand and document the relation between store-product DLCs and account-product/details/api-product-vx @done(2021-04-24)
		- currently we download details for all licences, including DLC (that are empty) - consider only using licences for DLC - base product updates for details @done(2021-04-26)
	clo improvements: @done(2021-04-21)
	- DRY clo.json @done(2021-04-20)
		- add preprocess step to replace placeholders with app provided values @done(2021-04-20)
		- pass a map[string]func()[]string to plug callbacks to get values @done(2021-04-20)
		- {join:} to concatenate values as csv @done(2021-04-20)
		- {list:} to use as individual values @done(2021-04-20)
		- add ability to specify first value as a default and transform callback as needed, perhaps like {join_1:media}, {list_1:search_properties} @done(2021-04-20)
		- add tests @done(2021-04-21)
	printInfo improvements: @done(2021-04-16)
		- highlight items that were created, not just changed for a sync session @done(2021-04-16)
	- operating system @done(2021-04-12) @project(add more properties)
	- series @done(2021-04-08) @project(new command enumerate)
	- features @done(2021-04-08) @project(new command enumerate)
	- genres @done(2021-04-08) @project(new command enumerate)
	- extract property @done(2021-04-12) @project(Download files)
	search improvements: @done(2021-04-08)
		- conditions should be combined with "AND", not "OR" @done(2021-04-08)
	- go run main.go search paj -pub paj results in double publisher output @done(2021-04-08) @project(Fix bugs)
	series command: @done(2021-04-08)
		- needs to be implemented @done(2021-04-08)
		- list? @done(2021-04-08)
		- info? @done(2021-04-08)
			- products for series @done(2021-04-08)
	- "Disco Elysium" issue - title has not changed even if changed on the remote side. This is due to couple factors: @done(2021-04-08) @project(Fix bugs)
	- extract is optimized to skip existing values, can be added to scrub @done(2021-04-08) @project(Fix bugs)
	- detail data (details, api-products-v1/v2) are never redownloaded unless missing - this can be addressed with updates system @done(2021-04-08) @project(Fix bugs)
	- "list wishlist-prod" doesn't work as expected @done(2021-04-08) @project(Fix bugs)
	- data issue: investigate why so many entries have "TEST DEVELOPER"/"TEST PUBLISHER" (search test) @done(2021-04-08) @project(Fix bugs)
	wishlist management command: @done(2021-04-07)
		- should we also perform local operations to avoid roundtrips and make local data (e.g. list command) more precise? @done(2021-04-07)
	info improvements: @done(2021-04-07)
		- when id doesn't exits - show this clearly @done(2021-04-07)
	details: @done(2021-04-07)
		- features @done(2021-04-07)
	api-products-v2 tags -> genre: @done(2021-04-07)
		- extract @done(2021-04-07)
		- search as text @done(2021-04-07)
	search improvements: @done(2021-04-06)
		- add ability to search by id @done(2021-04-06)
	rationalize working with times: @done(2021-04-05)
		- common method to produce timestamps based on minutes, hours, days @done(2021-04-05)
		- common output for times @done(2021-04-05)
	get-data improvements: @done(2021-04-05)
		- rewrite pipeline to itemize ids based on signals @done(2021-04-05)
		- get items for itemized ids @done(2021-04-05)
		- finalize itemization for api-product-v2 type == "PACK", includesGames
	extracts scrub learnings: @done(2021-04-04)
		- add all distinct values for things like publisher/developer @done(2021-04-03)
		- make Developer getter return []string @done(2021-04-03)
		- filter out "" values, so that they're not saved @done(2021-04-04)
	- GOG.com has several variants of the same image/background - need to add and download all @done(2021-04-02) @project(extracts scrub learnings)
	- ^ this might require moving prop extracts from string to []string @done(2021-04-02) @project(extracts scrub learnings)
	- backgrounds can be downloaded as jpg like screenshots @done(2021-04-02) @project(extracts scrub learnings)
	get-images improvements: @done(2021-04-02)
		- show titles, not ids when downloading @done(2021-04-02)
		- consider adding backup format (png -> jpg and vice a versa) @done(2021-04-02)
		- checking existing files is way too verbose - consider checking if there are missing files for product - show only then @done(2021-04-02)
		- don't consider .download as existing image @done(2021-04-02)
	- get-images need to be updated to support screenshots as []string @done(2021-03-30) @project(Fix bugs)
	- Add: GET /user/wishlist/add/{product_id} @done(2021-03-29) @project(wishlist management command)
	- Remove: GET /user/wishlist/remove/{product_id} @done(2021-03-29) @project(wishlist management command)
	- List: reuse list command @done(2021-03-29) @project(wishlist management command)
	- add ability to list recently created/modified items @done(2021-03-29) @project(List improvements)
	- create kvas helper that sets multiple pages concurently @done(2021-03-26) @project(concurrency improvements)
	- measure performance improvement and settle on number of concurrent requests @done(2021-03-26) @project(concurrency improvements)
		- currently getting the data with no writes is 1m45s -> 20s @done(2021-03-26)
	- set lowest size constraints for image type to filter out bad images: @done(2021-03-24) @project(get-images improvements)
		- create image of that size in editor with same color or transparent pixels - use that as lower bound @done(2021-03-24)
		- track those sizes in code, no need to configure @done(2021-03-24)
	- use that size to determine whether to keep download variant @done(2021-03-24) @project(get-images improvements)
	data quality improvements: @done(2021-03-21)
		- add command to list products that are not in pages @done(2021-03-21)
		- add func to remove products @done(2021-03-21)
		
	types improvements: @done(2021-03-21)
		- split vangogh_types to _products and _images @done(2021-03-21)
		- split Media to gog_media from gog_types @done(2021-03-21)
	info improvements: @done(2021-03-20)
		- when printing with any properties - print what type(s) id is available in @done(2021-03-20)
	- search -text owlcat and search -developer owlcat have very different results @done(2021-03-20) @project(Fix bugs)
	- running with no params shows an error, should show help @done(2021-03-20) @project(Fix bugs)
	- clo bug: default attribute must be the first in the list to be considered default @done(2021-03-20) @project(Fix bugs)
	- search higurashi and search -text higurashi have very different results (fixed by default attribute bug) @done(2021-03-20) @project(Fix bugs)
	clo improvements: @done(2021-03-20)
		- refactor defined* to return only one value and error @done(2021-03-20)
	split improvements: @done(2021-03-20)
		- don't split pages that have not been modified since the sync start @done(2021-03-20)
		
	- print screenshots one per line prefixed @done(2021-03-19) @project(printInfo improvements)
	- print report at the end of operations - changed, new @done(2021-03-19) @project(Operations log)
	- don't allow ambiguous abbreviations @done(2021-03-19) @project(clo)
	Info improvements: @done(2021-03-19)
		- when id is not present in the data - log @done(2021-03-19)
	dolo improvements: @done(2021-03-19)
		- consider only moving .download to final if the content length meets expectations @done(2021-03-19)
	Sync improvements: @done(2021-03-18)
		-  add flags to enable certain types of data (e.g. -images, -screenshots) @done(2021-03-18)
	- images @done(2021-03-17) @project(Download product types)
		- screenshots @done(2021-03-17)
	Search improvements: @done(2021-03-17)
		- deprecate individual image types in search - use only "image", search all image properties @done(2021-03-17)
		- Add "text" to search all text properties, and keep individual properties (title, developer, publisher) @done(2021-03-17)
		- Individual properties of certain type (text, image-id) are combined with OR @done(2021-03-17)
		- same goes for both text and image-id - they're combined with OR (unlikely a given product would match both image-id (that is specific) and text) @done(2021-03-17)
		- to display that result - show the property that matched @done(2021-03-17)
	Misc: @done(2021-03-17)
		- rename Screenshot URL func to ScreenshotJpeg @done(2021-03-17)
	- display id, title then "-" prefixed individual properties with a property prefix, e.g. - developer:"..." @done(2021-03-16) @project(List improvements)
	- unifiy printing products based on property extracts @done(2021-03-16) @project(List improvements)
	Info objective: @done(2021-03-16)
		- display all known properties for a product of any type by id @done(2021-03-16)
	Combine stash and distill into a single objective (extract?): @done(2021-03-15)
		- Perform efficient stashing of all properties @done(2021-03-15)
		- Distill at the same time to avoid reading files twice @done(2021-03-15)
		- Output of extract is just a distill stash, deprecate individual stashes, no need for them @done(2021-03-15)
	Rewrite local images store: @done(2021-03-15)
		- download using distilled stash only @done(2021-03-15)
	- use image-id, not full URL to store image metadata @done(2021-03-14) @project(Rewrite local images store)
	- store in one folder (images) like at origin @done(2021-03-14) @project(Rewrite local images store)
	- partition to have limited number of images per folder (seems like two letters are good choice - confirm options with data) @done(2021-03-14) @project(Rewrite local images store)
	Two letters produce 256 top level folders and ~300 items per folder for ~75K images, seems like it'll work great! @done(2021-03-14) @project(Rewrite local images store)
	- move all existing files to a new partitioned location @done(2021-03-14) @project(Rewrite local images store)
	- download types -> image types @done(2021-03-14) @project(Rewrite local images store)
	- create a new destination url func to partition @done(2021-03-14) @project(Rewrite local images store)
	Downloads throttling: @done(2021-03-14)
		- Images server is throttling - port delay heuristic from C# vangogh to avoid that @done(2021-03-14)
	Search: @done(2021-03-11)
		- add search objective that filters ids feeding them into list for display @done(2021-03-11)
		- move title, developer, publisher from list to search @done(2021-03-11)
		- add other properties @done(2021-03-11)
	download objective should only use download-type, not product type: @done(2021-03-08)
		- create SupportingProductTypes helper @done(2021-03-08)
		- iterate and download all artifacts of that download type @done(2021-03-08)
	- product-image @done(2021-03-07) @project(Download product types)
	- box-art @done(2021-03-07) @project(Download product types)
	- background @done(2021-03-08) @project(Download product types)
	- galaxyBackground @done(2021-03-08) @project(Download product types)
	- logo @done(2021-03-08) @project(Download product types)
	- icon @done(2021-03-08) @project(Download product types)
	- add simple format ("id title") @done(2021-03-07) @project(List improvements)
	Memorization completion: @done(2021-03-07)
		- memorize publisher, developer for search @done(2021-03-07)
	Distill stash: @done(2021-03-07)
		- combine all available stashes into a single list by id to allow all product-types to leverage that @done(2021-03-07)
	dolo: @done(2021-03-06)
		- MkdirAll for the destination url @done(2021-03-06)
	split: @done(2021-03-06)
		- use GetId() and propertyGetting pattern for DRY @done(2021-03-06)
	ReadLines: @done(2021-03-06)
		- add comments and skip those on read @done(2021-03-06)
		- annotate the products that are denylisted @done(2021-03-06)
	- add output format to "list" to allow listing fields to output (defaults to specified properties, e.g. "{{id}} {{title}}") @done(2021-03-01) @project(List improvements)
	- Output additional properties if used to filter, e.g. publisher, developer @done(2021-03-01) @project(List improvements)
	Search: @done(2021-03-01)
		- add "search" objective to print ID, title @done(2021-03-01)
		- this objective should allow using almost every field in the data @done(2021-03-01)
	Memorization: @done(2021-03-01)
		- productize the code @done(2021-03-01)
		- add more properties @done(2021-03-01)
	- "failed to fill arguments default values" when run with no arguments @done(2021-03-01) @project(Fix bugs)
	- "list store-p" is not an error @done(2021-02-28) @project(Fix bugs)
	- json: cannot unmarshal object into Go struct field Details.downloads of type []interface {} @done(2021-02-28) @project(Fix bugs)
	Ignore IDs: @done(2021-02-28)
	- add a parameter to ignore certain ids @done(2021-02-28) @project(Ignore IDs)
	- only process api-products (as a proxy for store-products and account-products) @done(2021-02-28) @project(Memorization)
	- remove product-type parameter from clo.json @done(2021-02-28) @project(Memorization)
	- continue trying to figure out games/movies situation for api-products @done(2021-02-28) @project(Memorization)
	- write custom code for movies based on store-products if needed @done(2021-02-28) @project(Memorization)
	- fix api-products title for "list" @done(2021-02-21) @project(Fix bugs)
	- split vangogh types into a separate module @done(2021-02-20)
	- add productType + mediaType valid check @done(2021-02-20)
	- split vangogh dstURLs into a separate module @done(2021-02-20)
	- add gob support for local types in addition to JSON  @done
	- enumerate and add image types @done
	- add helper funcs to parse media. Need this to pass media to gog_urls from clo @done
	- add "default" page gog_urls that take page, media, sort for the fetch func switch flow @done
	- transition gog_urls to use string in place of ids @done
	- only add hidden / updated flag if specified @done
	- fix 2FA message to use GOG.com language @done
	- re-implement cookies using kvas @done
	- split fetched paginated media @done
	- fetch missing details with delay between downloads @done
	- add list objective to print ID, title @done
	- check downloaded data (details) to fill types TODOs @done
	- add "id..." parameter to "list" to be used for status updates @done
	- investigate "list wishlist" issues @done
	- root caused to not closing files after a kvas.Get @done
	- convert all returned io.Reader to io.ReadCloser (should work with remote kvas as well) @done
	- ue file.Create instead of OpenFile for kvas.Set @done
	- kvas separate index extension from content extension (allow protobuf index, png files) @done
	- don't use global httpClient in cmds @done
	- create NewLocalJsonClient and NewLocalProtoClient that only take URL @done
	- add "all" flag to download images @done
	- Store-products are stored in "products" @done
	- "sync" objective that does all remote data fetching in one command @done
	- figure out throttling situation for downloading many details at once (do they send headers we can check? figure out other heuristics) @done
	^ Seems like there is no throttling anymore - I was able to download all details without encountering any throttling
	- default !overwrite check should be "fast" - only check if the file exists @done
	- move all dolo options to constructor, Download should take two parameters - source, destination @done
	- add api-products: https://api.gog.com/v2/games/{id} @done
	- index files should be gob (so no index selection) @done
	- don't use kvas for cookies.json @done
	- docs/images.md @done
