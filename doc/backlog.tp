wishlist management command:
	- should we also perform local operations to avoid roundtrips and make list more precise?

tags management command:
	- Create: POST /account/tags/add?name={tag_name}
	- Delete: POST /account/tags/delete?tag_id={tag_id}
	- Edit: POST /account/tags/update?tags={tags_json}
	- Add: POST /account/tags/attach?product_id={product_id}&tag_id={tag_id}
	- Remove: POST /account/tags/detach?product_id={product_id}&tag_id={tag_id}
	- List: ?

rationalize working with times:
	- common method to product timestamps based on minutes, hours, days
	- common output for times

Download files:
	- videos
		- youtube-dl?
	- product files by OS, language:
		- create helper for Details that returns collection of strucutred data per language 

concurrency improvements:
	- rewrite get-data pipeline to be concurrent:
		- getItems
		- getPages
		- split
		- extract
		- search
	
dolo improvements:
	- rewrite dolo to support concurrent ranges downloads
	- return report that contains:
		- files that were successfully downloaded with sizes
		- files that were not attempted to be downloaded

verbosity improvements:
	- add flags to functions to be optionally verbose
	- when verbose - use log.Print
	- when not - continue using fmt.Print
	
get-images improvements:
	- show titles, not ids when downloading
	- consider adding backup format (png -> jpg and vice a versa)
	- checking existing files is way too verbose - consider checking if there are missing files for product - show only then

history.txt:
	- add a file that collects results of sync operations over time
	- consider adding information on the downloaded files:
		- products that contributed to downloaded files
		- files with sizes
		- overall amount of data downloaded that session

List improvements:
	- add sort options (using memories)
		- title (default)
		- release date
		- added date
		- rating

Standartize directories:
	- opt/vangogh, etc/vangogh, etc.
	- provide flags for operations to specify non-default directories as well as allow reading from env. variables

Fix bugs:
	- get-images need to be updated to support screenshots as []string
	- "list wishlist-prod" doesn't work as expected
	- data issue: investigate why so many entries have "TEST DEVELOPER"/"TEST PUBLISHER" (search test)
	
Work on gaugin can start:
	- Publish vangogh on GitHub

Operations log:
	- add operations log or last success timestamp
	- track updated account products (new, modified, updated)

Improve verbosity:
	- add module that produced log.Print to the log output
	- add a "verbose" flag to every module
	-  use log.Print for errors and info, fmt.Print for progress

Documentation:
	- update modules documentation:
		- clo
		- kvas
		- dolo

Tests:
	- add test coverage for modules:
		- kvas
		- dolo
	- Make sure every closer is closed - validate errors, etc.

Report:
	- add various reports:
		- total product per type and media
		- all publishers, developers and number of games they have

Archive:
	- Add: GET /user/wishlist/add/{product_id} @done(2021-03-29) @project(wishlist management command)
	- Remove: GET /user/wishlist/remove/{product_id} @done(2021-03-29) @project(wishlist management command)
	- List: reuse list command @done(2021-03-29) @project(wishlist management command)
	- add ability to list recently created/modified items @done(2021-03-29) @project(List improvements)
	- create kvas helper that sets multiple pages concurently @done(2021-03-26) @project(concurrency improvements)
	- measure performance improvement and settle on number of concurrent requests @done(2021-03-26) @project(concurrency improvements)
		- currently getting the data with no writes is 1m45s -> 20s @done(2021-03-26)
	- set lowest size constraints for image type to filter out bad images: @done(2021-03-24) @project(get-images improvements)
		- create image of that size in editor with same color or transparent pixels - use that as lower bound @done(2021-03-24)
		- track those sizes in code, no need to configure @done(2021-03-24)
	- use that size to determine whether to keep download variant @done(2021-03-24) @project(get-images improvements)
	data quality improvements: @done(2021-03-21)
		- add command to list products that are not in pages @done(2021-03-21)
		- add func to remove products @done(2021-03-21)
		
	types improvements: @done(2021-03-21)
		- split vangogh_types to _products and _images @done(2021-03-21)
		- split Media to gog_media from gog_types @done(2021-03-21)
	info improvements: @done(2021-03-20)
		- when printing with any properties - print what type(s) id is available in @done(2021-03-20)
	- search -text owlcat and search -developer owlcat have very different results @done(2021-03-20) @project(Fix bugs)
	- running with no params shows an error, should show help @done(2021-03-20) @project(Fix bugs)
	- clo bug: default attribute must be the first in the list to be considered default @done(2021-03-20) @project(Fix bugs)
	- search higurashi and search -text higurashi have very different results (fixed by default attribute bug) @done(2021-03-20) @project(Fix bugs)
	clo improvements: @done(2021-03-20)
		- refactor defined* to return only one value and error @done(2021-03-20)
	split improvements: @done(2021-03-20)
		- don't split pages that have not been modified since the sync start @done(2021-03-20)
		
	- print screenshots one per line prefixed @done(2021-03-19) @project(printInfo improvements)
	- print report at the end of operations - changed, new @done(2021-03-19) @project(Operations log)
	- don't allow ambiguous abbreviations @done(2021-03-19) @project(clo)
	Info improvements: @done(2021-03-19)
		- when id is not present in the data - log @done(2021-03-19)
	dolo improvements: @done(2021-03-19)
		- consider only moving .download to final if the content length meets expectations @done(2021-03-19)
	Sync improvements: @done(2021-03-18)
		-  add flags to enable certain types of data (e.g. -images, -screenshots) @done(2021-03-18)
	- images @done(2021-03-17) @project(Download product types)
		- screenshots @done(2021-03-17)
	Search improvements: @done(2021-03-17)
		- deprecate individual image types in search - use only "image", search all image properties @done(2021-03-17)
		- Add "text" to search all text properties, and keep individual properties (title, developer, publisher) @done(2021-03-17)
		- Individual properties of certain type (text, image-id) are combined with OR @done(2021-03-17)
		- same goes for both text and image-id - they're combined with OR (unlikely a given product would match both image-id (that is specific) and text) @done(2021-03-17)
		- to display that result - show the property that matched @done(2021-03-17)
	Misc: @done(2021-03-17)
		- rename Screenshot URL func to ScreenshotJpeg @done(2021-03-17)
	- display id, title then "-" prefixed individual properties with a property prefix, e.g. - developer:"..." @done(2021-03-16) @project(List improvements)
	- unifiy printing products based on property extracts @done(2021-03-16) @project(List improvements)
	Info objective: @done(2021-03-16)
		- display all known properties for a product of any type by id @done(2021-03-16)
	Combine stash and distill into a single objective (extract?): @done(2021-03-15)
		- Perform efficient stashing of all properties @done(2021-03-15)
		- Distill at the same time to avoid reading files twice @done(2021-03-15)
		- Output of extract is just a distill stash, deprecate individual stashes, no need for them @done(2021-03-15)
	Rewrite local images store: @done(2021-03-15)
		- download using distilled stash only @done(2021-03-15)
	- use image-id, not full URL to store image metadata @done(2021-03-14) @project(Rewrite local images store)
	- store in one folder (images) like at origin @done(2021-03-14) @project(Rewrite local images store)
	- partition to have limited number of images per folder (seems like two letters are good choice - confirm options with data) @done(2021-03-14) @project(Rewrite local images store)
	Two letters produce 256 top level folders and ~300 items per folder for ~75K images, seems like it'll work great! @done(2021-03-14) @project(Rewrite local images store)
	- move all existing files to a new partitioned location @done(2021-03-14) @project(Rewrite local images store)
	- download types -> image types @done(2021-03-14) @project(Rewrite local images store)
	- create a new destination url func to partition @done(2021-03-14) @project(Rewrite local images store)
	Downloads throttling: @done(2021-03-14)
		- Images server is throttling - port delay heuristic from C# vangogh to avoid that @done(2021-03-14)
	Search: @done(2021-03-11)
		- add search objective that filters ids feeding them into list for display @done(2021-03-11)
		- move title, developer, publisher from list to search @done(2021-03-11)
		- add other properties @done(2021-03-11)
	download objective should only use download-type, not product type: @done(2021-03-08)
		- create SupportingProductTypes helper @done(2021-03-08)
		- iterate and download all artifacts of that download type @done(2021-03-08)
	- product-image @done(2021-03-07) @project(Download product types)
	- box-art @done(2021-03-07) @project(Download product types)
	- background @done(2021-03-08) @project(Download product types)
	- galaxyBackground @done(2021-03-08) @project(Download product types)
	- logo @done(2021-03-08) @project(Download product types)
	- icon @done(2021-03-08) @project(Download product types)
	- add simple format ("id title") @done(2021-03-07) @project(List improvements)
	Memorization completion: @done(2021-03-07)
		- memorize publisher, developer for search @done(2021-03-07)
	Distill stash: @done(2021-03-07)
		- combine all available stashes into a single list by id to allow all product-types to leverage that @done(2021-03-07)
	dolo: @done(2021-03-06)
		- MkdirAll for the destination url @done(2021-03-06)
	split: @done(2021-03-06)
		- use GetId() and propertyGetting pattern for DRY @done(2021-03-06)
	ReadLines: @done(2021-03-06)
		- add comments and skip those on read @done(2021-03-06)
		- annotate the products that are denylisted @done(2021-03-06)
	- add output format to "list" to allow listing fields to output (defaults to specified properties, e.g. "{{id}} {{title}}") @done(2021-03-01) @project(List improvements)
	- Output additional properties if used to filter, e.g. publisher, developer @done(2021-03-01) @project(List improvements)
	Search: @done(2021-03-01)
		- add "search" objective to print ID, title @done(2021-03-01)
		- this objective should allow using almost every field in the data @done(2021-03-01)
	Memorization: @done(2021-03-01)
		- productize the code @done(2021-03-01)
		- add more properties @done(2021-03-01)
	- "failed to fill arguments default values" when run with no arguments @done(2021-03-01) @project(Fix bugs)
	- "list store-p" is not an error @done(2021-02-28) @project(Fix bugs)
	- json: cannot unmarshal object into Go struct field Details.downloads of type []interface {} @done(2021-02-28) @project(Fix bugs)
	Ignore IDs: @done(2021-02-28)
	- add a parameter to ignore certain ids @done(2021-02-28) @project(Ignore IDs)
	- only process api-products (as a proxy for store-products and account-products) @done(2021-02-28) @project(Memorization)
	- remove product-type parameter from clo.json @done(2021-02-28) @project(Memorization)
	- continue trying to figure out games/movies situation for api-products @done(2021-02-28) @project(Memorization)
	- write custom code for movies based on store-products if needed @done(2021-02-28) @project(Memorization)
	- fix api-products title for "list" @done(2021-02-21) @project(Fix bugs)
	- split vangogh types into a separate module @done(2021-02-20)
	- add productType + mediaType valid check @done(2021-02-20)
	- split vangogh dstURLs into a separate module @done(2021-02-20)
	- add gob support for local types in addition to JSON  @done
	- enumerate and add image types @done
	- add helper funcs to parse media. Need this to pass media to gog_urls from clo @done
	- add "default" page gog_urls that take page, media, sort for the fetch func switch flow @done
	- transition gog_urls to use string in place of ids @done
	- only add hidden / updated flag if specified @done
	- fix 2FA message to use GOG.com language @done
	- re-implement cookies using kvas @done
	- split fetched paginated media @done
	- fetch missing details with delay between downloads @done
	- add list objective to print ID, title @done
	- check downloaded data (details) to fill types TODOs @done
	- add "id..." parameter to "list" to be used for status updates @done
	- investigate "list wishlist" issues @done
	- root caused to not closing files after a kvas.Get @done
	- convert all returned io.Reader to io.ReadCloser (should work with remote kvas as well) @done
	- ue file.Create instead of OpenFile for kvas.Set @done
	- kvas separate index extension from content extension (allow protobuf index, png files) @done
	- don't use global httpClient in cmds @done
	- create NewLocalJsonClient and NewLocalProtoClient that only take URL @done
	- add "all" flag to download images @done
	- Store-products are stored in "products" @done
	- "sync" objective that does all remote data fetching in one command @done
	- figure out throttling situation for downloading many details at once (do they send headers we can check? figure out other heuristics) @done
	^ Seems like there is no throttling anymore - I was able to download all details without encountering any throttling
	- default !overwrite check should be "fast" - only check if the file exists @done
	- move all dolo options to constructor, Download should take two parameters - source, destination @done
	- add api-products: https://api.gog.com/v2/games/{id} @done
	- index files should be gob (so no index selection) @done
	- don't use kvas for cookies.json @done
	- docs/images.md @done
