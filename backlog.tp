Finalize gob transition:
	- use gob to store data
	- new objective "export" + format "json" to print in human readable form 

ReadLines:
	- add comments and skip those on read
	- annotate the products that are denylisted

dolo:
	- MkdirAll for the destination url

List improvements:
	- add sort options (using memories)
	- add simple format ("id title")

Search:
	- add search objective that filters ids feeding them into list for display 
	- move title, developer, publisher from list to search
	- add other properties

Reverse-lookup:
	- Add objective to reverse find all product types from download artifact name (e.g. product-image)

Report:
	- add various reports:
		- total product per type and media
		- all publishers, developers and number of games they have

Split objectives into modules:
	- fetch
	- download
	- list
	- search
	- ...

Improve verbosity:
	- add module that produced log.Print to the log output
	- add a "verbose" flag to every module
	-  use log.Print for errors and info, fmt.Print for progress

Fix bugs:
No known at the moment

Operations log:
	- add operations log
	- print report at the end of operations - changed, new
	- track updated account products (new, modified, updated)

Download product types:
	- images @start
		- product-image @start
		- box-art
		- background
		- screenshots
	- videos
		- youtube-dl
	- product files

Additional features/improvements:
	- add bulk Set operation to kvas (io.Reader enumerator?) for more efficient split

Documentation:
	- update modules documentation:
		- clo
		- kvas
		- dolo

Tests:
	- add test coverage for modules:
		- kvas
		- dolo
	- Make sure every closer is closed - validate errors, etc.

Archive:
	- add output format to "list" to allow listing fields to output (defaults to specified properties, e.g. "{{id}} {{title}}") @done(2021-03-01) @project(List improvements)
	- Output additional properties if used to filter, e.g. publisher, developer @done(2021-03-01) @project(List improvements)
	Search: @done(2021-03-01)
		- add "search" objective to print ID, title @done(2021-03-01)
		- this objective should allow using almost every field in the data @done(2021-03-01)
	Memorization: @done(2021-03-01)
		- productize the code @done(2021-03-01)
		- add more properties @done(2021-03-01)
	- "failed to fill arguments default values" when run with no arguments @done(2021-03-01) @project(Fix bugs)
	- "list store-p" is not an error @done(2021-02-28) @project(Fix bugs)
	- json: cannot unmarshal object into Go struct field Details.downloads of type []interface {} @done(2021-02-28) @project(Fix bugs)
	Ignore IDs: @done(2021-02-28)
	- add a parameter to ignore certain ids @done(2021-02-28) @project(Ignore IDs)
	- only process api-products (as a proxy for store-products and account-products) @done(2021-02-28) @project(Memorization)
	- remove product-type parameter from clo.json @done(2021-02-28) @project(Memorization)
	- continue trying to figure out games/movies situation for api-products @done(2021-02-28) @project(Memorization)
	- write custom code for movies based on store-products if needed @done(2021-02-28) @project(Memorization)
	- fix api-products title for "list" @done(2021-02-21) @project(Fix bugs)
	- split vangogh types into a separate module @done(2021-02-20)
	- add productType + mediaType valid check @done(2021-02-20)
	- split vangogh dstURLs into a separate module @done(2021-02-20)
	- add gob support for local types in addition to JSON  @done
	- enumerate and add image types @done
	- add helper funcs to parse media. Need this to pass media to gog_urls from clo @done
	- add "default" page gog_urls that take page, media, sort for the fetch func switch flow @done
	- transition gog_urls to use string in place of ids @done
	- only add hidden / updated flag if specified @done
	- fix 2FA message to use GOG.com language @done
	- re-implement cookies using kvas @done
	- split fetched paginated media @done
	- fetch missing details with delay between downloads @done
	- add list objective to print ID, title @done
	- check downloaded data (details) to fill types TODOs @done
	- add "id..." parameter to "list" to be used for status updates @done
	- investigate "list wishlist" issues @done
	- root caused to not closing files after a kvas.Get @done
	- convert all returned io.Reader to io.ReadCloser (should work with remote kvas as well) @done
	- ue file.Create instead of OpenFile for kvas.Set @done
	- kvas separate index extension from content extension (allow protobuf index, png files) @done
	- don't use global httpClient in cmds @done
	- create NewLocalJsonClient and NewLocalProtoClient that only take URL @done
	- add "all" flag to download images @done
	- Store-products are stored in "products" @done
	- "sync" objective that does all remote data fetching in one command @done
	- figure out throttling situation for downloading many details at once (do they send headers we can check? figure out other heuristics) @done
	^ Seems like there is no throttling anymore - I was able to download all details without encountering any throttling
	- default !overwrite check should be "fast" - only check if the file exists @done
	- move all dolo options to constructor, Download should take two parameters - source, destination @done
	- add api-products: https://api.gog.com/v2/games/{id} @done
	- index files should be gob (so no index selection) @done
	- don't use kvas for cookies.json @done
	- docs/images.md @done
